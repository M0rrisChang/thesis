from scipy.optimize import leastsq
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import numpy as np


sales = []
# ???
news = {1: 5, 2: 60, 3: 63, 4: 582, 5: 667, 6: 733, 7: 742, 8: 838, 9: 763, 10: 764, 11: 74}

# cnn
news = {'2020-01-07': 1, '2020-01-09': 1, '2020-01-16': 1, '2020-01-17': 1, '2020-01-18': 1, '2020-01-20': 3, '2020-01-21': 17, '2020-01-22': 14, '2020-01-23': 34, '2020-01-24': 30, '2020-01-25': 7, '2020-01-26': 28, '2020-01-27': 36, '2020-01-28': 46, '2020-01-29': 50, '2020-01-30': 62, '2020-01-31': 24, '2020-02-01': 11, '2020-02-02': 8, '2020-02-03': 13, '2020-02-04': 23, '2020-02-05': 14, '2020-02-06': 39, '2020-02-07': 46, '2020-02-08': 21, '2020-02-09': 14, '2020-02-10': 41, '2020-02-11': 57, '2020-02-12': 37, '2020-02-13': 57, '2020-02-14': 31, '2020-02-15': 12, '2020-02-16': 11, '2020-02-17': 37, '2020-02-18': 41, '2020-02-19': 34, '2020-02-20': 29, '2020-02-21': 38, '2020-02-22': 21, '2020-02-23': 25, '2020-02-24': 61, '2020-02-25': 80, '2020-02-26': 88, '2020-02-27': 108, '2020-02-28': 116, '2020-02-29': 64, '2020-03-01': 60, '2020-03-02': 126, '2020-03-03': 98, '2020-03-04': 129, '2020-03-05': 108, '2020-03-06': 113, '2020-03-07': 49, '2020-03-08': 53, '2020-03-09': 125, '2020-03-10': 123, '2020-03-11': 104, '2020-03-12': 134, '2020-03-13': 137, '2020-03-14': 69, '2020-03-15': 74, '2020-03-16': 135, '2020-03-17': 102, '2020-03-18': 109, '2020-03-19': 128, '2020-03-20': 102, '2020-03-21': 89, '2020-03-22': 76, '2020-03-23': 90, '2020-03-24': 95, '2020-03-25': 104, '2020-03-26': 92, '2020-03-27': 139, '2020-03-28': 50, '2020-03-29': 88}
news = {4: 133, 5: 237, 6: 170, 7: 246, 8: 225, 9: 577, 10: 676, 11: 766, 12: 741, 13: 658}
# filtered by OUTRAGE_COMPONENTS
news = {'2020-01-17': 1, '2020-01-18': 1, '2020-01-20': 1, '2020-01-21': 1, '2020-01-22': 3, '2020-01-23': 4, '2020-01-24': 8, '2020-01-26': 4, '2020-01-27': 7, '2020-01-28': 11, '2020-01-29': 8, '2020-01-30': 10, '2020-01-31': 6, '2020-02-02': 2, '2020-02-03': 3, '2020-02-04': 4, '2020-02-05': 4, '2020-02-06': 11, '2020-02-07': 9, '2020-02-08': 7, '2020-02-09': 4, '2020-02-10': 8, '2020-02-11': 12, '2020-02-12': 3, '2020-02-13': 10, '2020-02-14': 8, '2020-02-15': 1, '2020-02-16': 1, '2020-02-17': 4, '2020-02-18': 7, '2020-02-19': 8, '2020-02-20': 7, '2020-02-21': 12, '2020-02-22': 6, '2020-02-23': 6, '2020-02-24': 17, '2020-02-25': 15, '2020-02-26': 17, '2020-02-27': 20, '2020-02-28': 31, '2020-02-29': 23, '2020-03-01': 18, '2020-03-02': 34, '2020-03-03': 21, '2020-03-04': 37, '2020-03-05': 22, '2020-03-06': 29, '2020-03-07': 11, '2020-03-08': 15, '2020-03-09': 34, '2020-03-10': 29, '2020-03-11': 13, '2020-03-12': 13, '2020-03-13': 11, '2020-03-14': 10, '2020-03-15': 9, '2020-03-16': 23, '2020-03-17': 14, '2020-03-18': 11, '2020-03-19': 19, '2020-03-20': 13, '2020-03-21': 22, '2020-03-22': 12, '2020-03-23': 11, '2020-03-24': 24, '2020-03-25': 17, '2020-03-26': 26, '2020-03-27': 24, '2020-03-28': 15, '2020-03-29': 33, '2020-03-30': 6}
news = {3: 2, 4: 21, 5: 44, 6: 42, 7: 43, 8: 50, 9: 141, 10: 169, 11: 119, 12: 114, 13: 150}

# bbc
#news = {'2020-01-22': 1, '2020-01-23': 1, '2020-01-24': 4, '2020-01-25': 3, '2020-01-26': 2, '2020-01-27': 1, '2020-01-28': 4, '2020-01-29': 7, '2020-01-30': 7, '2020-01-31': 4, '2020-02-01': 4, '2020-02-02': 1, '2020-02-03': 7, '2020-02-04': 3, '2020-02-05': 3, '2020-02-06': 4, '2020-02-08': 1, '2020-02-09': 1, '2020-02-10': 3, '2020-02-11': 3, '2020-02-12': 3, '2020-02-13': 5, '2020-02-14': 4, '2020-02-16': 1, '2020-02-17': 1, '2020-02-19': 7, '2020-02-20': 2, '2020-02-21': 2, '2020-02-22': 2, '2020-02-23': 1, '2020-02-24': 1, '2020-02-25': 2, '2020-02-26': 8, '2020-02-27': 7, '2020-02-28': 11, '2020-02-29': 6, '2020-03-01': 2, '2020-03-02': 10, '2020-03-03': 8, '2020-03-04': 6, '2020-03-05': 12, '2020-03-06': 17, '2020-03-07': 14, '2020-03-08': 12, '2020-03-09': 15, '2020-03-10': 29, '2020-03-11': 20, '2020-03-12': 25, '2020-03-13': 28, '2020-03-14': 22, '2020-03-15': 21, '2020-03-16': 55, '2020-03-17': 48, '2020-03-18': 49, '2020-03-19': 44, '2020-03-20': 59, '2020-03-21': 31, '2020-03-22': 27, '2020-03-23': 58, '2020-03-24': 45, '2020-03-25': 63, '2020-03-26': 58, '2020-03-27': 63, '2020-03-28': 38, '2020-03-29': 30, '2020-03-30': 12}
#news = {4: 11, 5: 28, 6: 19, 7: 19, 8: 15, 9: 37, 10: 79, 11: 160, 12: 313, 13: 355, 14: 12}
# filtered by OUTRAGE_COMPONENTS
news = {'2020-01-23': 1, '2020-01-28': 2, '2020-01-30': 1, '2020-01-31': 1, '2020-02-03': 1, '2020-02-10': 1, '2020-02-11': 1, '2020-02-12': 1, '2020-02-21': 1, '2020-02-24': 1, '2020-02-28': 1, '2020-02-29': 1, '2020-03-01': 1, '2020-03-02': 2, '2020-03-03': 1, '2020-03-04': 1, '2020-03-05': 2, '2020-03-06': 4, '2020-03-07': 4, '2020-03-08': 3, '2020-03-09': 3, '2020-03-10': 6, '2020-03-11': 3, '2020-03-12': 2, '2020-03-13': 2, '2020-03-14': 4, '2020-03-15': 4, '2020-03-16': 7, '2020-03-17': 5, '2020-03-18': 8, '2020-03-19': 3, '2020-03-20': 1, '2020-03-21': 2, '2020-03-22': 2, '2020-03-23': 4, '2020-03-24': 4, '2020-03-25': 7, '2020-03-26': 7, '2020-03-27': 5, '2020-03-28': 5, '2020-03-29': 5, '2020-03-30': 2}
#news = {9: 4, 10: 17, 11: 24, 12: 28, 13: 37}


# all us news
news = {'2020-02-05': 1, '2020-02-08': 1, '2020-02-12': 1, '2020-02-29': 1, '2020-03-03': 1, '2020-03-04': 3, '2020-03-05': 1, '2020-03-06': 1, '2020-03-07': 3, '2020-03-08': 1, '2020-03-09': 1, '2020-03-11': 2, '2020-03-12': 4, '2020-03-13': 4, '2020-03-14': 4, '2020-03-15': 5, '2020-03-16': 4, '2020-03-17': 6, '2020-03-18': 7, '2020-03-19': 5, '2020-03-20': 4, '2020-03-21': 2, '2020-03-22': 4, '2020-03-23': 3, '2020-03-24': 11, '2020-03-25': 3, '2020-03-26': 9, '2020-03-27': 10, '2020-03-28': 5, '2020-03-29': 9, '2020-03-30': 10}
news = {6: 2, 7: 1, 9: 1, 10: 10, 11: 20, 12: 32, 13: 50}

# all uk news
#news = {'2020-01-17': 1, '2020-01-18': 2, '2020-01-20': 2, '2020-01-21': 2, '2020-01-23': 6, '2020-01-24': 5, '2020-01-25': 7, '2020-01-26': 6, '2020-01-27': 2, '2020-01-28': 8, '2020-01-29': 10, '2020-01-30': 8, '2020-01-31': 8, '2020-02-01': 12, '2020-02-02': 6, '2020-02-03': 4, '2020-02-04': 5, '2020-02-05': 4, '2020-02-06': 4, '2020-02-07': 4, '2020-02-08': 6, '2020-02-09': 2, '2020-02-10': 4, '2020-02-11': 10, '2020-02-12': 6, '2020-02-13': 9, '2020-02-14': 7, '2020-02-15': 3, '2020-02-17': 4, '2020-02-18': 3, '2020-02-19': 3, '2020-02-20': 4, '2020-02-21': 6, '2020-02-22': 3, '2020-02-23': 2, '2020-02-24': 9, '2020-02-25': 14, '2020-02-26': 13, '2020-02-27': 13, '2020-02-28': 25, '2020-02-29': 17, '2020-03-01': 11, '2020-03-02': 25, '2020-03-03': 25, '2020-03-04': 31, '2020-03-05': 30, '2020-03-06': 29, '2020-03-07': 11, '2020-03-08': 14, '2020-03-09': 25, '2020-03-10': 24, '2020-03-11': 29, '2020-03-12': 34, '2020-03-13': 28, '2020-03-14': 32, '2020-03-15': 28, '2020-03-16': 38, '2020-03-17': 37, '2020-03-18': 37, '2020-03-19': 35, '2020-03-20': 30, '2020-03-21': 30, '2020-03-22': 34, '2020-03-23': 41, '2020-03-24': 54, '2020-03-25': 52, '2020-03-26': 55, '2020-03-27': 59, '2020-03-28': 44, '2020-03-29': 43, '2020-03-30': 47}
#news = {3: 3, 4: 28, 5: 54, 6: 29, 7: 39, 8: 25, 9: 102, 10: 165, 11: 200, 12: 241, 13: 348}

for k, v in news.items():
    sales.append(v)

print('sum news', sum(sales))


# sales vector
sales = np.array(sales)
# time intervals
t = np.linspace(1.0, float(len(sales)), num=len(sales))
# cumulatice sales
c_sales = np.cumsum(sales)
# initial variables(M, P & Q)
vars = [sum(sales), 0.002, 0.002]

# residual (error) function
def residual(vars, t, sales):
    M = vars[0]
    P = vars[1]
    Q = vars[2]
    Bass = M * (((P + Q) ** 2 / P) * np.exp(-(P + Q) * t)) / (1 + (Q / P) * np.exp(-(P + Q) * t)) ** 2
    return (Bass - (sales))
                 
# non linear least square fitting
varfinal, success = leastsq(residual, vars, args=(t, sales))

# estimated coefficients
m = varfinal[0]
p = varfinal[1]
q = varfinal[2]

print(varfinal)
#sales plot (pdf)
#time interpolation
tp = (np.linspace(1.0, float(len(sales)) * 10, num=len(sales) * 10)) / 10
cofactor = np.exp(-(p + q) * tp)
sales_pdf = m * (((p + q) ** 2 / p) * cofactor) / (1 + (q / p) * cofactor) ** 2
plt.plot(tp, sales_pdf, t, sales)
plt.title('Keywords pdf')
plt.legend(['Fit', 'True'])
plt.show()

# Cumulative sales (cdf)
sales_cdf = m * (1 - cofactor) / (1 + (q / p) * cofactor)
plt.plot(tp, sales_cdf, t, c_sales)
plt.title('Keywords cdf')
plt.legend(['Fit', 'True'])
plt.show()
